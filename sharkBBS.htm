<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<script charset="utf-8" type="application/javascript" src="d3.js"></script>
<style type="text/css">
/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <meernik@live.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return 
 * - Landon
 * ----------------------------------------------------------------------------
 */

/* Overall Bullshit */
body {
    font-family: sans-serif;
    background-color: black;
    color: #0FF;
    margin: 0;
}
input,textarea,button {
    background-color: #222;
    border: 1pt solid orange; /* Good things are measured in points */
    color: orange;
    border-radius: 3pt;
}
button {
    color: #0FF;
}
.clearer {
    clear: both;
    margin: 0;
    padding: 0;
}

/* Bullshit for static elements and containers */
#topbar {
    padding: 2pt;
    position: static;
    border-bottom: 1pt solid #0FF;
    width:100%;
}
.posts {
    margin: 0 5ex 0 5ex;
}
#posted {
    padding-top: 14pt;
    padding-bottom: 5em;
}

/* Bullshit for Users and Profiles */
.miniprofile .nick {
    font-size: 14pt;
    vertical-align: middle;
    display: inline-block;
}
.miniprofile {
    font-family: monospace;
    border: 1pt solid #0FF;
    border-radius: 3pt;
    display: inline-block;
}
.miniprofile .avatar {
    vertical-align: middle;
    max-width: 48pt;
    max-height: 48pt;
    width: 24pt;
    height: 24pt;
    margin: 2pt;
    float: left;
}

/* Bullshit for posts */
.signature {
    white-space: pre-wrap;
    padding: 6pt 3pt 6pt 3pt;
    font-size: 10pt;
}
.subject {
    font-size: 13pt;
    font-weight: bold;
    padding: 3pt;
}
.post {
    border: 1pt solid #0FF;
    border-radius: 3pt;
    margin: 14pt 0 0 0;
    clear: both;
}
.post .header {
    border: 1pt solid #0FF;
    border-width: 1pt;
    margin: -1pt -1pt 0 -1pt;
    border-radius: 3pt;
    border-right: 1pt solid #0FF;
}
.post .lasted {
    font-size: 10pt;
    padding-left: 4ex;
    float: left
}
.post .content {
    white-space: pre-wrap;
    border-top-left-radius: 3pt;
    border-top-right-radius: 3pt;
    border: 1pt solid #0FF;
    border-bottom: 0;
    margin: 2pt -1pt 0 5pt;
    padding: 3pt;
}
.post .footer {
    margin-top: -1pt;
}
.post .footer .container {
    display: inline;
    float: right;
    border-radius: 3pt;
    border-bottom: 1pt solid #000;
    margin: -11pt 6pt -1pt 0;
}
.post .footer button {
    margin: 0 -1pt -1pt 0;
}

/* Bullshit overriding usual miniprofiles in posts */
.post .miniprofile {
    margin: -1pt 3pt -1pt -1pt;
    float: left;
}
.post .avatar {
    width: 32pt;
    height: 32pt;
}

/* Bullshit for the post editor */
.post textarea.content {
    width: calc(100% - 12pt);
    max-width: calc(100% - 12pt);
    border: 1pt solid orange;
    height: 15em;
}
.post input.subject {
    width: 25ex;
    display: block;
    font-weight: normal;
    font-size: 12pt;
}
</style>
<title>Sofas all the way down</title>
<script>
"use strict";
var urls = {
    "posts": "http://localhost:5984/posts/",
    "uuids": "http://localhost:5984/_uuids",
    "changes": "http://localhost:5984/posts/_changes",
    "thread": "http://localhost:5984/posts/_design/posts/_view/thread?include_docs=true"
}

var users = { // XXX Test users, this shoud probably get deleted sometime.
    "djtëstio": { // In real life this will be a UUID
        "nick": "DJ Tëstio",
        "title": "Data Victim",
        "avatar": "/static/davenport/prophat.jpg",
        "signature": "When one has much to put into them, a day has a hundred pockets.\n\t-Nietzche"
    }
}

if (Element.prototype.closest === undefined) {
    console.log("Registering closest");
    Element.prototype.closest = function(sel) {
        var cur = this.parentNode;
        while(cur !== document && !cur.matches(sel)) {
            cur = cur.parentNode;
        }
        if (cur === document) {
            return null;
        } else {
            return cur;
        }
    }
}
document.addEventListener("DOMContentLoaded", function() {
    var threadid  = "root", // Current global threadid being displayed
        user = "djtëstio"; // Current logged in username (key in humans table)
    d3.select(".reply").on("click", function() {
        var posted = this.closest('.post');
        console.log("Posted is", posted);
        d3.xhr(urls.uuids, function(resp) {
            var now = new Date(resp.getResponseHeader('Date')).toISOString(),
                id = JSON.parse(resp.response)['uuids'][0],
                post = {
                    // These never change after its posted
                    "owner": user,
                    "created": now,
                    "threadid": threadid,
                    "subject": posted.querySelector('.subject').value,
                    // These change every edit
                    "lasted": now,
                    "content": posted.querySelector('.content').value,
                    "renderer": "text",
                    "signature": posted.querySelector('.signature').textContent
                };
            d3.xhr(urls.posts + id)
                .mimeType("application/json")
                .on('error', function(e) {
                    console.error(e); 
                    alert("SHIT POST");
                 })
                .on('load', function(resp) {
                    var pdata = JSON.parse(resp.response);
                    console.log("GOOD JOB", pdata);
                    loadThread("root")
                    posted.querySelector('.post').value = "";
                 })
                .send('PUT', JSON.stringify(post));
                console.log("Attempted to post", post);
        });
    });
    var loadThread = function(new_threadid) {
        d3.xhr(urls.thread)
            .on("error", function(resp) { console.error(JSON.parse(resp.response)); })
            .on('load', function(resp) {
                // Post Renderer
                var rdata = JSON.parse(resp.response),
                    posts = rdata.rows,
                    $posts = d3.select("#posts").selectAll("div.post")
                               .data(posts, function(d) { return d.id;}),
                    $npost = $posts.enter()
                        .append('div')
                        .attr('class', 'post'),
                    $header = $npost.append('div')
                        .attr('class', 'header'),
                    $miniprofile = $header.append('div')
                        .attr('class', 'miniprofile'), 
                    $content = $npost.append('div')
                        .text(function(d) { return d.doc.content; })
                        .attr('class', 'content')
                        .style('display', function(d) {
                            return d.doc.content ? "unset" : "none";
                        }),
                    $footer = $npost.append('div')
                        .attr('class', 'footer'), 
                    $buttoncon = null;
                console.log("POSTS:", posts);
                $posts.exit().remove();
                $header.append("input")
                    .attr("type", "hidden")
                    .attr("class", 'id')
                    .attr("value", function(d) { return d.id })
                $header.append("input")
                    .attr("type", "hidden")
                    .attr("class", 'rev')
                    .attr("value", function(d) { return d.doc._rev });
                // miniprofile -- should probably go behind a user cache
                $miniprofile.append('img')
                    .attr('src', function(d) { return users[d.doc.owner].avatar;})
                    .attr('class', 'avatar');
                $miniprofile.append('div')
                    .attr('class', 'nick')
                    .text(function(d) { return users[d.doc.owner].nick;});
                $miniprofile.append('div')
                    .attr('class', 'title')
                    .text(function(d) { return users[d.doc.owner].title;});
                // header
                $header.append('div')
                    .attr('class', 'subject')
                    .text(function(d) { return d.doc.subject });
                $header.append('div')
                    .attr('class', 'lasted')
                    .text(function(d) { return d.doc.lasted;});
                $header.append('div')
                    .attr('class', 'clearer')
                // footer
                $footer.append('div')
                    .attr('class', 'signature')
                    .text(function(d) { return d.doc.signature;})
                    .style('display', function(d) {
                        return d.doc.content ? "unset" : "none";
                    }),
                $buttoncon = $footer.append('div')
                        .attr('class', 'container');
                $buttoncon.append('button')
                    .attr('class', 'link')
                    .text("Link")
                    .style('display', function(d) {
                        return d.doc.content ? "unset" : "none";
                    });
                $buttoncon.append('button')
                    .attr('class', 'edit')
                    .text("Edit");
                $buttoncon.append('button')
                    .attr('class', 'delete')
                    .text("Delete")
                    .on('click', function() {
                        var id = this.closest('.post').querySelector('.id').value,
                            rev = this.closest('.post').querySelector('.rev').value;
                        console.log(id);
                        d3.xhr(urls.posts + id + "?rev=" + rev)
                        .on('error', function(e) {
                            console.error(e); 
                            alert("SHIT POST");
                         })
                        .on('load', function(e) {
                            loadThread("root")
                        })
                        .send('DELETE');
                    });
                $buttoncon.append('button')
                    .attr('class', 'interject')
                    .text("Interject");
                threadid = new_threadid
            })
            .send('POST', JSON.stringify({
                "key": [new_threadid]
            }));
    }
    d3.select("#reload").on("click", function() {
        loadThread("root");
    });
    loadThread("root")
});
</script>
</head>
<body>
<div id="topbar">
    <div id="you" class="miniprofile">
        <img class="avatar" src="prophat.jpg" />
        <div class="nick">DJ Tëstio!</div><br />
    </div>
    <div id="important"></div>
    <div id="new"></div>
</div>
<div id="posts" class="posts">
</div>
<div class="posts" id="posted">
    <div class="post"> 
        <div class="header">
            <div class="miniprofile">
                <img class="avatar" src="prophat.jpg" />
                <div class="nick">DJ Tëstio!</div>
                <div class="title">Victim</div>
            </div>
            <input type="text" class="subject" value="subject_name_here" />
            <div class="lasted">Eventually now.</div>
            <div class="clearer"></div>
        </div>
        <textarea style="display: block" class="content"></textarea>
        <div class="footer">
            <div class="signature">When one has much to put into them, a day has a hundred pockets 
 - Nietzche </div>
            <div class="container">
                <button class="reply">Reply</button>
            </div>
        </div>
    </div>
</div>
</body>
</html>
