<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<script charset="utf-8" type="application/javascript" src="d3.js"></script>
<style type="text/css">
/*
 ----------------------------------------------------------------------------
 "THE BEER-WARE LICENSE" (Revision 42):
 <meernik@live.com> wrote this file. As long as you retain this notice you
 can do whatever you want with this stuff. If we meet some day, and you think
 this stuff is worth it, you can buy me a beer in return 
 - Landon
 ----------------------------------------------------------------------------
*/

/* 
This is made up of 
    cyan borders and text, 
    orange bordered interactables, 
    white user content, 
    black background, 
    and a dash of #222
*/

/* Overall Bullshit */
body {
    font-family: monospace;
    background-color: black;
    color: #0FF;
    margin: 0;
}
input,textarea,button,#topbar a {
    background-color: #222;
    border: 1pt solid orange; /* Good things are measured in points */
    color: orange;
    border-radius: 3pt;
}
button {
    color: #0FF;
    padding: 1pt 6pt;
}
.clearer {
    clear: both;
    margin: 0;
    padding: 0;
}
#template {
    display: none;
}
input[type="test"]:disabled {
    background: #000;
}
/* Bullshit for static elements and containers */
#topbar {
    padding: 2pt;
    position: static;
    width:100%;
    margin: 3pt 0 3pt 0;
    padding-bottom: -1pt;
    border-bottom: 1pt solid #0FF;
}
#topbar a {
    text-decoration: none;
    padding: 1pt 6pt;
    color: #0FF;
    margin-bottom: -4pt;
}
#topbar a.active {
    border-color: #0FF;
}
.posts {
    margin: 0 5ex 0 5ex;
}
#base_posted {
    position: relative;
    top: 10pt;
}
/* Bullshit for Users and Profiles */
.miniprofile .nick {
    font-size: 14pt;
    color: #0FF;
    vertical-align: middle;
    display: inline-block;
}
.miniprofile {
    font-family: monospace;
    border: 1pt solid #0FF;
    border-radius: 3pt;
    display: inline-block;
}
img.avatar {
    vertical-align: middle;
    width: 32pt;
    height: 32pt;
    margin: 2pt;
    float: left;
}
/* Bullshit for posts */
.post .signature {
    white-space: pre-wrap;
    padding: 6pt 3pt 6pt 3pt;
    font-size: 10pt;
}
.post .subject {
    font-size: 13pt;
    font-weight: bold;
    padding: 3pt;
}
.post {
    border: 1pt solid #0FF;
    border-radius: 3pt;
    margin: 14pt 0 0 0;
    clear: both;
}
.post .header {
    border: 1pt solid #0FF;
    border-width: 1pt;
    margin: -1pt -1pt 0 -1pt;
    border-radius: 3pt;
    border-right: 1pt solid #0FF;
}
.post .lasted {
    font-size: 10pt;
    padding-left: 4ex;
    float: left
}
.post .content {
    white-space: pre-wrap;
    color: #FFF;
    border-top-left-radius: 3pt;
    border-top-right-radius: 3pt;
    border: 1pt solid #0FF;
    border-bottom: 0;
    margin: 2pt -1pt 0 5pt;
    padding: 3pt;
}
.post .footer {
    margin-top: -1pt;
}
.post .footer .container {
    display: inline;
    float: right;
    border-radius: 3pt;
    border-bottom: 1pt solid #000;
    margin: -11pt 6pt -1pt 0;
}
.post .footer button {
    margin: 0 -1pt -1pt 0;
    display: none;
}
/* Bullshit for miniprofiles in posts */
.post .miniprofile {
    margin: -1pt 3pt -1pt -1pt;
    float: left;
}
/* Bullshit for normal posts (replies) */
.post.reply .interject {
    display: initial;
}
/* Bullshit for the OP */
.post.op div, .post.op {
    border-color: orange
}
.post.op .subject{
    color: orange
}
.post.op .unload {
    display: initial;
}
.post.op .interject {
    display: initial;
}
/* Bullshit for interjection stubs */
.post.interjection {
    margin-left:48pt;
}
.post.interjection .content {
    display: none;
}
.post.interjection .signature {
    display: none;
}
.post.interjection .load {
    display: initial;
}
.post.interjection.posted .load {
    display: none;
}
.post.interjection.posted .delete {
    display: none;
}
.post.interjection.posted .content {
    display: initial;
}
.post.interjection.posted .signature {
    display: block;
}
/* Bullshit for the post editor */
.post textarea.content {
    width: calc(100% - 12pt);
    max-width: calc(100% - 12pt);
    border: 1pt solid orange;
    height: 15em;
}
.post input.subject {
    width: 25ex;
    display: block;
    font-weight: normal;
    font-size: 12pt;
}
.post.posted .save {
    display: initial;
}
.post.posted.interjection .save {
    display: none;
}
.post.posted .cancel {
    display: initial;
}
.post.posted .edit {
    display: none !important;
}
.post.replyed .reply {
    display: initial;
}
/* Bullshit for my posts */

.post.mine .edit {
    display: initial;
}
.post.mine .delete {
    display: initial;
}
</style>
<title>Couchlocked...</title>
<script>
"use strict";
// Model - Literally a picture of how data is literally shaped on the backend
/* 
threadid is the id of the thread you would be replying to if you hit 'reply'.

|-  means: threadid points to ID of post in the column where | is.
|-- means: '' and also this is an interjection on the |-'d post closest above it (its parentid points there)

"root" (default threadid)
-(Reply0)                       # Reply0 is the OP (post with _id = threadid)
|-Reply1
|-Reply2                        # There is no Reply2Int0.
|--Reply2Int1  (Reply0)         # Identified as interjections by having parentid set
   |-Reply2Int1 Reply1          # not displayed in this thread
   |-...        Reply...
|--Reply2Int2
|-Reply3 
|-...
^ current threadid
>>>^ go in one level by setting current threadid to Reply2Int1

Reply2Int1 (OP)
|-Reply2Int1Reply1              # displayed in this thread
|-...
<<<^ go up one level by loading OP's threadid
*/
var users = { // User data. Users missing these fields may not render correctly
    "": { // Defaults
        "nick": "",
        "title": "",
        "avatar": "",
        "signature": ""
    }
}

// DataModel - Metaphorically a picture of how data is literally shaped on the frontend.
document.addEventListener("DOMContentLoaded", function() {
    var user = "", // Current logged in username (key in _users, without 'org.couchdb.user:')
        primeUsers = (function(usernames, cb) {
        // `usernames` should be an array without org.couchdb.user: cb will be invoked when they are all
        // in `users` Sometimes this needs two parallel requests because in couchdb, requesting all_docs
        // doesn't actually give you the same document as requesting it directly would in the case
        // of asking for your own users document, and we need some non-public fields on users[user] so we can
        // update the profile, so we get that one differently.
        var uncached_by_username = {},
            requests = 1,
            log_cb = (function() {
                requests--;
                if (requests == 0) {
                    console.debug("Primed users cache for ", usernames, "as", user, "result: ", users);
                    cb();
                }
            });
            console.log("Priming usrs cache, cookie:", document.cookie);
            // Build a list of users we don't have in 'users,' then make a request if there actually are any
            usernames.forEach(function(username) {
                if (!users[username]) {
                    uncached_by_username["org.couchdb.user:" + username] = true;
                }
            });
            if (uncached_by_username["org.couchdb.user:" + user]) {
                requests = requests + 1;
                delete uncached_by_username['org.couchdb.user:' + user];
                d3.json(urls.users + '/' + encodeURIComponent('org.couchdb.user:' + user),  function(d) {
                    users[user] = d;
                    console.debug("Primed cache for logged in user", d);
                    if (!d.password_scheme) {
                        console.error("Did not get full user doc for ", user);
                    }
                    log_cb();
                });
            }
            if (Object.keys(uncached_by_username).length === 0) {
                console.debug("Users cache hit");
                log_cb();
                return;
            } 
            d3.xhr(urls.users + "/_all_docs?include_docs=true", function(resp) {
                var rows = JSON.parse(resp.response).rows;
                rows.forEach(function(row) {
                    var username;
                    if (row.error) {
                        console.error("Error finding user ", username, ":", row);
                        alert("SHIT POST")
                    }
                    username = row.id.replace('org.couchdb.user:', '')
                    users[username] = row.doc;
                    users[username]._rev = row.value.rev;
                    // fill out defaults
                    Object.keys(users[""]).forEach(function(key) {
                        if (!users[username][key]) {
                            users[username][key] = users[""][key];
                        }
                    });
                });
                log_cb();
            })
            .on("error", function(resp) {
                console.error("Error priming users cache for ", usernames, ":", resp);
                alert("SHIT POST!")
            })
            .header("Content-Type", "application/json")
            .send("POST", JSON.stringify({"keys": Object.keys(uncached_by_username)}));
        }),
        loadThread = (function(new_threadid) {
        // This function works by making three requests. First it makes one for the OP and one for the replies at the same time.
        // The results are then put into replies and interjections_by_parentid such that OP is first in replies.
        // When requests reaches zero, actuallyLoadThread is called, it sorts and collates replies into `posts`,
        // Then it compiles a list of usernames owning posts in the thread (which will be required to render), primes the users
        // cache with them (the third request), and then calls renderPosts(posts)
        var replies = [],
            requests = 2, 
            interjections_by_parentid = {},
            actuallyLoadThread = function() { // Called when interjections_by_postid and replies are populated
                var posts = [],
                    op = replies.shift(), // OP is shifted on, replies are pushed
                    usernames = [user];  // users required to render the current thread (user is required to render replayed
                replies.sort(function(a, b) { return d3.ascending(a.created, b.created) });
                replies.unshift(op);
                replies.forEach(function(reply) {
                    posts.push(reply);
                    if (interjections_by_parentid[reply._id]) {
                        interjections_by_parentid[reply._id].sort(function(a, b) { return d3.descending(a.lasted, b.lasted); })
                        interjections_by_parentid[reply._id].forEach(function(interjection) { 
                            posts.push(interjection);
                        });
                        delete interjections_by_parentid[reply._id];
                    }
                });
                if (Object.keys(interjections_by_parentid).length) {
                    console.error("Orphaned posts: ", interjections_by_parentid);
                }
                // Prime the users cache
                posts.forEach(function(post) {
                    usernames.push(post.owner);
                })
                console.debug("Collated posts: ", posts);
                primeUsers(usernames, function() { 
                    renderPosts(posts); 
                    d3.select('#base_posted .threadid').attr('value', new_threadid); // XXX should this be property?
                });
            };
        console.debug("Loading thread ", new_threadid, "as user", user);
        if (!user) {
            alert("Login first.");
            window.location.hash = "login";
            return;
        };
        // Get the OP
        d3.json(urls.posts + '/' + new_threadid, function(d) {
            console.log("Found OP")
            d.cssclass = 'op';
            replies.unshift(d);
            if (--requests == 0) {
                actuallyLoadThread();
            }
        });
        // Get the other posts
        d3.xhr(urls.thread + '?include_docs=true')
            .on("error", function(resp) { console.error(JSON.parse(resp.response)); })
            .on('load', function(resp) {
                var rdata = JSON.parse(resp.response),
                    posts = rdata.rows;
                posts.forEach(function(post) {
                    if (post.doc.parentid) {
                        if (!interjections_by_parentid[post.doc.parentid]) {
                            interjections_by_parentid[post.doc.parentid] = [];
                        }
                        post.doc.cssclass = 'interjection';
                        interjections_by_parentid[post.doc.parentid].push(post.doc);
                    } else {
                        replies.push(post.doc);
                        post.doc.cssclass = 'reply';
                    }
                })
                if (--requests == 0) {
                    actuallyLoadThread();
                }
            })
            .send('POST', JSON.stringify({
                "keys": [new_threadid]
            }));
        }),
        // Given an element which is a post (or post editor), return the post JSON object
        getPost = function(posted) { 
        var subject = posted.querySelector('.subject'),
            content = posted.querySelector('.content'),
            signature = posted.querySelector('.signature'),
            owner = posted.querySelector('.owner'),
            threadid = posted.querySelector('.threadid'),
            _id = posted.querySelector("._id"),
            _rev = posted.querySelector("._rev"),
            post = {
                "owner": owner.value || owner.textContent,
                "threadid": threadid.value || threadid.textContent,
                "subject": subject.value || subject.textContent,
                "content": content.value || content.textContent,
                "renderer": "text",
                "signature": signature.value || signature.textContent
            };
            if (_id && _id.value) {
                post._id = _id.value || _id.textContent;
            }
            if (_rev && _rev.value) {
                post._rev = _rev.value || _rev.textContent;
            }
            return post;
        },
        postPost = function(post, callback) { 
        var actuallyPostPost = function() {
            var revstr = post._rev ? "?rev=" + post._rev : "";
            d3.xhr(urls.post + '/' + post._id + revstr)
                .mimeType("application/json")
                .on('error', function(e) {
                    console.error(e); 
                    alert("SHIT POST");
                 })
                .on('load', function(resp) {
                    console.log("GOOD JOB", resp.response);
                    callback();
                 })
                .send('POST', JSON.stringify(post));
                console.log("Attempted to post", post);
            };
            if (post._id && !post._rev) {
                console.log("Tried to post post with ID but not rev", post);
                alert("SHIT POST");
            };
            if (!post._id) {
                // THIS IS NOT ACTUALLY JUST URANDOM-AS-A-SERVICE.
                d3.xhr(urls.uuids, function(resp) {
                    post._id = JSON.parse(resp.response)['uuids'][0];
                    actuallyPostPost();
                });
            } else {
                actuallyPostPost();
            }
        },
// Application - Metaphorically a picture of how data is metaphorically shaped on the backend
        renderPosts = function(posts) {
        var $posts = d3.select("#posts").selectAll("div.post")
                    .data(posts, function(d) { return d._id;}),
            $npost = $posts.enter()
                    .append('div')
                    .html(d3.select('#template').html()),
            updatePost = function($post) { 
            // Set text, value, and src of elements with these classes to their corresponding data.
            var fields = ['_rev', '_id', 'owner', 'subject', 'lasted', 'content', 'signature', 'threadid'],
                ownerFields = ['avatar', 'nick', 'title'];
            fields.forEach(function(field) {
                var $field = $post.select('.' + field),
                    func = (function(d) { return d[field]; });
                $field.attr('src', func);
                $field.attr('value', func);
                $field.text(func);
            });
            ownerFields.forEach(function(field) {
                var $field = $post.select('.' + field),
                    func = (function(d) { return users[d.owner][field]; });
                $field.attr('src', func);
                $field.attr('value', func);
                $field.text(func);
            });
            $post.select('.nick').attr('href', function(d) {
                return '#profile/' + d.owner;
            });
            $post.attr('class', function(d) { 
                if (d.cssclass) return 'post ' + d.cssclass; 
                else return 'post';
            });
            $post.classed('mine', function(d) {
                return d.owner == user;
            });
            $post.select('.content')
                .style('display', function(d) {
                    return d.content ? null : "none";
                });
            /*
            $post.select('.signature')
                .style('display', function(d) {
                    return d.signature ? null : "none";
                });
            */
            $post.select('.edit')
                .on('click', function () {
                    // Clicked "edit"
                    var posted = this.closest('.post'),
                        post = getPost(posted),
                        that = this;
                    d3.select(posted).classed("posted", true);
                    posted.querySelector('.content')
                        .outerHTML = '<textarea class="content">' + post.content + '</textarea>';
                    posted.querySelector('.subject')
                        .outerHTML = '<input class="subject" value="' + post.subject + '" />';
                });
            $post.select('.cancel')
                .on('click', function () {
                    var posted = this.closest('.post'),
                        thread = this.closest('.post').querySelector('.threadid').value;
                    d3.select(posted).classed("posted", false);
                    posted.querySelector('.subject')
                        .outerHTML = '<div class="subject"></div>';
                    posted.querySelector('.content')
                        .outerHTML = '<div class="content"></div>';
                    loadThread(thread);
                });
            $post.select('.save')
                .on('click', function () {
                    var posted = this.closest('.post'),
                        post = getPost(posted), // XXX NO DATE
                        thread = d3.select('#base_posted .threadid').attr('value');
                    console.log("Saving..");
                    postPost(post, function() {
                            // Post has been saved, unhide buttons, 
                            d3.select(posted).classed("posted", false);
                            posted.querySelector('.subject')
                                .outerHTML = '<div class="subject"></div>';
                            posted.querySelector('.content')
                                .outerHTML = '<div class="content">loading...</div>';
                            loadThread(thread);
                    });
                });
            $post.select('.delete')
                .on('click', function() {
                    var id = this.closest('.post').querySelector('._id').value,
                        rev = this.closest('.post').querySelector('._rev').value,
                        thread = this.closest('.post').querySelector('.threadid').value;
                    d3.xhr(urls.posts + '/' + id + "?rev=" + rev)
                    .on('error', function(e) {
                        console.error(e); 
                        alert("SHIT POST");
                    })
                    .on('load', function(e) {
                        loadThread(thread)
                    })
                    .send('DELETE');
                });
            $post.select('.load')
                .on('click', function() {
                    window.location.hash = "posts/" + this.closest('.post').querySelector('._id').value;
                });
            $post.select('.unload')
                .on('click', function() {
                    window.location.hash = "posts/" + this.closest('.post').querySelector('.threadid').value;
                });
            $post.select('.interject')
                .on('click', function(e) { 
                var $nposted = d3.select(document.createElement("div")),
                    that = this, 
                    // XXX NEXT UP ON JAVASCRIPT, REPLACE THIS SHIT WITH PLAIN DOM APIS FOR OPTIMAL CLASSINESS
                    thread = d3.select('#base_posted .threadid').attr('value')
                    d3.selectAll('#posts .interject').style('display', 'none');
                    $nposted.html(d3.select('#template').html())
                        .attr('class', "post interjection posted")
                        .attr('id', "")
                    $nposted.select('.subject').node()
                        .outerHTML = '<input class="subject" />';
                    $nposted.select('.content').node()
                        .outerHTML = '<textarea class="content"></textarea>';
                    $nposted.select('.threadid')
                        .attr('value', thread);
                    $nposted.select('.owner')
                        .attr('value', user);
                    $nposted.select('.signature')
                        .text(users[user].signature);
                    $nposted.select('.signature').text(users[user].signature);
                    $nposted.select('.avatar').attr('src', users[user].avatar);
                    $nposted.select('.title').text(users[user].title);
                    $nposted.select('.nick').text(users[user].nick);
                    $nposted.select('.interject')
                        .style('display', 'initial')
                        .on('click', function() {
                        var post = getPost(this.closest('.post'));
                            post.parentid = that.closest('.post').querySelector('._id').value;
                            postPost(post, function() {
                                console.log("INTERJECTED");
                                loadThread(thread);
                            });
                        });
                    $nposted.datum({});
                    $nposted.select('.cancel')
                        .style('display', 'initial')
                        .on('click', function() {
                            d3.selectAll('#posts .post:not(.interjection) .interject').style('display', 'initial');
                            $nposted.remove();
                        });
                    document.getElementById('posts')
                        .insertBefore($nposted.node(), that.closest('.post').nextSibling)
                })
        };
        console.log("RENDERING POSTS:", posts);
        // Delete posts that no longer exist
        $posts.exit().remove(); // XXX NEXT UP ON JAVASCRIPT - TRANSITION FWOOSH TO LEFT
        // Update the new post
        updatePost($npost);
        // Update an existing post
        updatePost($posts);
        d3.selectAll('#posts .post:not(.interjection) .interject').style('display', 'initial');
        $posts.order();

        // Set up the reply editor
        d3.select("#base_posted")
            .style('display', 'block')
        d3.select("#base_posted .owner")
            .attr('value', user)
        d3.select('#base_posted .signature').text(users[user].signature);
        d3.select('#base_posted .avatar').attr('src', users[user].avatar);
        d3.select('#base_posted .title').text(users[user].title);
        d3.select('#base_posted .nick').text(users[user].nick);
        d3.select('#base_posted .reply')
            .on('click', function() {
            var posted = this.closest('.post');
            var post = getPost(posted);
            postPost(post, function() {
                loadThread(post.threadid);
                posted.querySelector('.content').value = '';
            });
        });
    }
    // I heard cool kids used hash routers
    // When you navigate to page foo:
    //   The element with class "page" and an ID that starts with foo are set display:block
    //   Other elements with class "page" are hidden. (display:none)
    //   The tab with href "#foo" is set class=active, others have it removed
    //   The function foo in this map is called with the remaining path elements as arguments and #foo_page as this
    var routes = {
            'login': function() {
                var $login_page = d3.select(this);
                $login_page.select('button.login').on('click', function() {
                    var username = $login_page.select('.username').property('value'),
                        password = $login_page.select('.password').property('value');
                    console.log('Attempting login as', username, password);
                    d3.xhr(urls.session, function(response) {
                        if (response === null) {
                            console.error('Unsuccessful login');
                            alert('Unauthorized!');
                            return;
                        }
                        console.log('Successful login', response);
                        user = username;
                        if (users[user]) {
                            delete users[user]
                            primeUsers([user], function() {
                                window.location.hash = 'posts/root';
                            });
                        } else {
                            window.location.hash = 'posts/root';
                        }
                    })
                    .header('Content-Type', 'application/json')
                    .send('POST', JSON.stringify({
                        'name': username, 
                        'password': password}));
                });
                if (user) {
                    d3.select(this).select('.loggedon').style('display', 'block');
                    d3.select(this).select('.user').text(user);
                } else {
                    d3.select(this).select('.loggedon').style('display', 'none');
                }
            },
            'register': function() {
                var $register_page = d3.select(this);
                $register_page.select('button.register').on('click', function() {
                    var username = $register_page.select('input.username').property('value'),
                        nick = $register_page.select('input.nick').property('value'),
                        signature = $register_page.select('input.signature').property('value'),
                        avatar = $register_page.select('input.avatar').property('value'),
                        password = $register_page.select('input.password').property('value'),
                        password2 = $register_page.select('input.password2').property('value');

                    if (password != password2) {
                        alert('Passwords do not match');
                        return;
                    }
                    if (!username.match(/^\w+$/)) {
                        alert('Username is not a word');
                        return;
                    }
                    d3.xhr(urls.users + '/' + encodeURIComponent('org.couchdb.user:' + username))
                    .on('load', function(resp) {
                        if (resp.status != 201) {
                            alert('SHIT POST ', + resp.status);
                            console.error('Non-201 response', resp);
                        }
                        console.debug('Registered user: ', resp);
                        d3.xhr(urls.session, function(response) {
                            if (response === null) {
                                console.error('Unsuccessful login');
                                alert('Unauthorized!');
                                return;
                            }
                            alert('Registered ' + username + '. :D');
                            user = username;
                            window.location.hash = 'posts/root';
                        })
                        .on('error', function(response) {
                            console.error("Couldn't log in after creating user", username, response);
                            alert('SHIT POST!')
                        })
                        .header('Content-Type', 'application/json')
                        .send('POST', JSON.stringify({
                            'name': username, 
                            'password': password}));
                    })
                    .on('error', function(resp) {
                        alert('SHIT POST ' + resp.status);
                        console.error('Something bad happened', resp);
                    })
                    .header('Content-Type', 'application/json')
                    .send('PUT', JSON.stringify({
                        '_id': 'org.couchdb.user:' + username,
                        'name': username,
                        'type': 'user',
                        'roles': [],
                        'password': password,
                        'nick': nick,
                        'signature': signature,
                        'avatar': avatar,
                    }));

                });
            },
            'posts': function(post) {
                if (post) {
                    loadThread(post);
                } else {
                    window.location.hash = 'posts/root';
                    return;
                }
            },
            'profile': function(username) {
                var $profile_page = d3.select(this);
                if (!username) {
                    if (!user) {
                        alert('Login first.');
                        window.location.hash = 'login';
                        return;
                    }
                    window.location.hash = 'profile/' + user;
                    return;
                }
                console.debug('Loading profile for: ', username);
                primeUsers([username], function() {
                    // Damnit, HTML, why is there no consistent "the thing I'm displaying" property/attr/css
                    $profile_page.select('input.username').property('value', username);
                    $profile_page.select('span.username').text(username);
                    $profile_page.select('input.nick').property('value', users[username].nick);
                    $profile_page.select('span.nick').text(users[username].nick);
                    $profile_page.select('img.avatar').attr('src', users[username].avatar);
                    $profile_page.select('input.avatar').property("value", users[username].avatar);
                    $profile_page.select('textarea.signature').property('value', users[username].signature);
                    $profile_page.select('div.signature').text(users[username].signature);
                    $profile_page.select('input.password').property('value', "");
                    $profile_page.select('input.password2').property('value', "");

                    $profile_page.selectAll('tr.password').style('display', user == username ? '' : 'none');
                    $profile_page.selectAll('input').style('display', user == username ? 'inline' : 'none');
                    $profile_page.selectAll('textarea').style('display', user == username ? 'inline' : 'none');
                    $profile_page.selectAll('span').style('display', user == username ? 'none' : 'inline');
                    $profile_page.selectAll('div').style('display', user == username ? 'none' : 'inline');

                    $profile_page.select('button.save').style('display', user == username ? 'inline' : 'none')
                    .on('click', function() {
                        var fields = {
                            'type': 'user',
                            'nick': $profile_page.select('input.nick').property('value'),
                            'avatar': $profile_page.select('input.avatar').property('value'),
                            'signature': $profile_page.select('textarea.signature').property('value'),
                            'password': $profile_page.select('input.password2').property('value')
                            },
                            inherited_fields = ['_rev', '_id', 'roles', 'name'],
                            password_fields = ['derived_key', 'salt', 'iterations', 'password_scheme'],
                            invalidate_session = true;
                        
                        if (fields.password != $profile_page.select('input.password').property('value')) {
                            alert("Passwords don't match.");
                            return
                        }
                        if (!fields.password) { // If there's no password change, pass through the old password fields 
                            delete fields.password;
                            inherited_fields = inherited_fields.concat(password_fields);
                            invalidate_session = false;
                        } 
                        inherited_fields.forEach(function(key) {
                            fields[key] = users[user][key];
                        });
                        console.debug("Updating user", user, "to", fields);
                        d3.xhr(urls.users + '/' + encodeURIComponent('org.couchdb.user:' + user))
                        .on('load', function(resp) {
                            delete users[username]; 
                            if (invalidate_session) {
                                d3.xhr(urls.session)
                                .on('load', function(resp) {
                                    if (!user) {
                                        alert("SHIT POST")
                                        throw "Seriously how did you get here?";
                                    }
                                    delete users[user];
                                    user = "";
                                    alert("Password changed, please relogin");
                                    window.location.hash = "login";
                                })
                                .send("DELETE");
                            } else {
                                alert("Updated!");
                                window.location.hash = "profile";
                            }
                        })
                        .on('error', function(resp) {
                            console.error("User update failed", resp);
                            alert("SHIT POST");
                        })
                        .header('Content-Type', 'application/json')
                        .send('PUT', JSON.stringify(fields));
                    });
                    console.debug("Rendered profile for", username);
                });
            },
            "help": function() {
                // This doesn't actually need to do anything
            }
        },
        route = function(hash) {
            var path_elements = hash.slice(1).split("/"),
                page = path_elements.shift(),
                page_elem = d3.select('#' + page + "_page")[0][0];
            console.debug("Navigating to", page, "(", path_elements, ")");
            if (page) {
                d3.selectAll('.page').
                    style("display", function(d) { return this.id.startsWith(page) ? "block" : "none"; });
                d3.selectAll('#topbar a').
                    classed("active", function(d) { return this.href.slice(1).split("/")[0] == page; });
                routes[page].apply(page_elem, path_elements);
            } else { // Did you really want to navigate to nowhere?
                console.log("hash", hash, "appears to go nowhere");
                d3.selectAll('.page').style("display", "none");
                d3.selectAll('#topbar a').classed("active", false);
            }
        };

    window.addEventListener('hashchange', function() {route(window.location.hash)});
    route(window.location.hash);
});
// TODO consistent formatting about 'var'
</script>
</head>
<body>
<div id="topbar">
    <!-- It is assumed that hrefs of all these are hashes --!>
    <a id="login_tab" href="#login">Login</a>
    <a id="register_tab" href="#register">Register</a>
    <a id="posts_tab" href="#posts">Posts</a>
    <a id="profile_tab" href="#profile">Profile</a>
    <a id="help_tab" href="#help">Help</a>
</div>
<div id="login_page" class="page">
    <p class="loggedon"><span>Currently logged in as:</span><span class="user" /></p>
    <p><span>Username:</span><input type="text" class="username" /></p>
    <p><span>Password:</span><input type="password" class="password" /></p>
    <button class="login">login</button>
</div>
<div id="register_page" class="page">
    <p><span>Username (login and URL, immutable):</span><input type="text" class="username" /></p>
    <p><span>Nick (display name, can be changed):</span><input type="text" class="nick" /></p>
    <p><span>Signature (not required):</span><input type="text" class="signature" /></p>
    <p><span>Image URL (not required):</span><input type="text" class="avatar" /></p>
    <p><span>Password:</span><input type="password" class="password" /></p>
    <p><span>Password:</span><input type="password" class="password2" /></p>
    <button class="register">register</button>
</div>
<div id="posts_page" class="page">
    <div id="posts" class="posts">
    <!-- This gets filled out by D3 --!>
    </div>
    <div class="posts">
        <div id="template" class="post">
            <div class="header">
                <div class="miniprofile">
                    <img src="/static/sys/prophat.jpg" class="avatar">
                    <a class="nick" href="#profile">DJ Tëstio</a>
                    <div class="title">#E_REKT</div>
                </div>
                <input type="hidden" class="_id" />
                <input type="hidden" class="_rev" />
                <input type="hidden" class="owner" />
                <input type="hidden" class="threadid" />
                <div class="subject">Imma loadin' some posts!</div>
                <div class="lasted">2015-03-11T00:04:20.514Z</div>
                <div class="clearer"></div>
            </div>
            <div class="content">Post pictures of toast.</div>
            <div class="footer">
                <div class="signature"></div>
                <div class="container">
                    <button class="unload">Unload</button>
                    <button class="edit">Edit</button>
                    <button class="save">Save</button>
                    <button class="cancel">Cancel</button>
                    <button class="delete">Delete</button>
                    <button class="load">Load</button>
                    <button class="interject">Interject!</button>
                    <button class="reply">Reply</button>
                </div>
            </div>
        </div>
        <div class="post replyed" style="display: none" id="base_posted"> 
            <div class="header">
                <div class="miniprofile">
                    <img class="avatar" src="" />
                    <div class="nick"></div>
                    <div class="title"></div>
                </div>
                <input type="hidden" class="owner" value="" />
                <input type="hidden" class="threadid" />
                <input type="text" class="subject" value="" />
                <div class="lasted">Eventually now.</div>
                <div class="clearer"></div>
            </div>
            <textarea style="display: block" class="content"></textarea>
            <div class="footer">
                <div class="signature"></div>
                <div class="container">
                    <button class="reply">Reply</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="profile_page" class="page">
    <table>
        <tr>
            <td class="label">username</td>
            <td><input class="username" type="text" disabled /><span class="username"></span></td>
        </tr>
        <tr>
            <td class="label">nick</td>
            <td><input class="nick" type="text"/><span class="nick"></span></td>
        </tr>
        <tr>
            <td class="label">avatar</td>
            <td><img class="avatar" /><input class="avatar" type="text"/></td>
        </tr>
        <tr>
            <td class="label">signature</td>
            <td><textarea class="signature"></textarea><div class="signature"></span></td>
        </tr>
        <tr class="password">
            <td class="password">password</td>
            <td><input class="password" type="password" /><span class="password"></span></td>
        </tr>
        <tr class="password">
            <td class="password2">password(again to change)</td>
            <td><input class="password2" type="password" /><span class="password"></span></td>
        </tr>
    </table>
    <button class="save">Save</button>
</div>
<div id="help_page" class="page">
    Ha. You expected there to be something here?
</div>
</body>
<script>
"use strict";
// Global configuration
var urls = {
    "posts": "/posts",
    "uuids": "/_uuids",
    "thread": "/posts/_design/posts/_view/thread",
    "post": "/posts/_design/posts/_update/post",
    "session": "/_session",
    "users": "/_users"
}

// Utilities
if (Element.prototype.closest === undefined) {
    console.log("Registering closest");
    Element.prototype.closest = function(sel) {
        var cur = this.parentNode;
        while(cur !== document && !cur.matches(sel)) {
            cur = cur.parentNode;
        }
        if (cur === document) {
            return null;
        } else {
            return cur;
        }
    }
}
</script>
</html>
