{
    "language": "javascript",
    "validate_doc_update": "
function (newDoc, oldDoc, userCtx, secObj) {
    var required_keys = ['owner', 'renderer', 'content', 'lasted', 'created', 'subject', 'threadid', 'signature'];
    log('UPDATE VALIDATIN');
    log(oldDoc);
    log('->');
    log(newDoc);
    if (newDoc.threadid === 'PRISMO') {
        throw 'Hey. What the fuck are you doing here?';
    }
    if (!newDoc.owner) {
        throw {forbidden: 'Must have an owner'};
    }
    if (oldDoc !== null) {
        if (newDoc.created !== oldDoc.created) {
            throw {forbidden: 'Attempted to change post created'};
        }
        if (oldDoc.owner !== userCtx.name) {
            var admin = false;
            userCtx.roles.forEach(function(role) { if (role === 'admin') admin = true; });
            if (admin) {
                log('Administrator ' + userCtx.name + ' modifying post owned by ' + oldDoc.owner);
            } else {
                log(userCtx.name + ' with roles ' + userCtx.roles + ' cannot modify post owned by ' + oldDoc.owner);
                throw {forbidden: 'Attempted to change unowned post'};
            }
        }
    }
    if (isNaN(Date.parse(newDoc.created))) {
        throw {forbidden: 'Created date is not a date'};
    }
    if (isNaN(Date.parse(newDoc.lasted))) {
        throw {forbidden: 'Last edited is not a date'};
    }
    required_keys.forEach(function(key) {
        if (!key in newDoc) {
            throw {forbidden: 'Missing ' + key};
        }
    });
    return true;
}
    ",
    "updates": {
        "post": "
function (doc, req) {
    var now = new Date().toISOString(),
        newDoc = JSON.parse(req.body);
    if (!doc) {
        if (req.id !== undefined) {
            newDoc._id = req.id;
        } else {
            newDoc._id = req.uuid;
        }
        newDoc.created = now;
        newDoc.lasted = now;
        return [newDoc, ''];
    } else {
        log('EDIT THE DOCUMENTSING');
        log(newDoc);
        log(req);
        if (req.id && doc._id && req.id !== doc._id) {
            throw {conflict: 'Contradictory request'};
        }
        doc._id = doc._id || req.id || req.uuid;
        if (doc._rev !== newDoc._rev) {
            throw {conflict: 'MVCCCCCC conflict' + doc._rev + ' vs ' + newDoc._rev};
        }
        Object.keys(newDoc).forEach(function(k) {
            log('THING MUTATED');
            log(k);
            if (k !== 'created') { 
                doc[k] = newDoc[k];
            }
        });
        doc.lasted = now;
        log(doc);
        return [doc, ''];
    }
}"
    },
    "views":
    {
        "thread": {
            "map": "function(doc) { emit(doc.threadid, null); }"
        }
    }
}
